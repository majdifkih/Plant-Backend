name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job de test
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 0000
          POSTGRES_DB: plantZ
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --network-alias=postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h postgres -p 5432; then
              echo "PostgreSQL is ready";
              break;
            fi
            echo "Waiting for PostgreSQL...";
            sleep 2;
          done

      - name: Set DATABASE_URL environment variable
        run: echo "DATABASE_URL=postgres://postgres:0000@postgres:5432/plantZ" >> $GITHUB_ENV

      - name: Run tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: npm run build

  # Job de build
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 0000
          POSTGRES_DB: plantZ
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --network-alias=postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Set DATABASE_URL environment variable
        run: echo "DATABASE_URL=postgres://postgres:0000@postgres:5432/plantZ" >> $GITHUB_ENV

      - name: Build the application
        run: npm run build

  # Job de deploy
  deploy:
    runs-on: ubuntu-latest
    needs: build  # DÃ©pend du job de build

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 0000
          POSTGRES_DB: plantZ
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --network-alias=postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set DATABASE_URL environment variable
        run: echo "DATABASE_URL=postgres://postgres:0000@postgres:5432/plantZ" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Start the server
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: nohup npm start &

      - name: Install Ngrok
        run: |
          curl -s https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -o ngrok.zip
          unzip ngrok.zip
          sudo mv ngrok /usr/local/bin
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Expose the local server with Ngrok
        run: |
          nohup ngrok http 8080 --log=stdout &

      - name: Get Ngrok URL
        id: ngrok-url
        run: |
          sleep 5
          url=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "NGROK_URL=$url" >> $GITHUB_ENV

      - name: Display Ngrok URL
        run: |
          echo "The public Ngrok URL is: ${{ env.NGROK_URL }}"
