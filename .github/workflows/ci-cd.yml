name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Déclenchement lors d'un push sur la branche principale
  pull_request:
    branches:
      - main  # Déclenchement lors de la création d'un pull request sur la branche principale

jobs:
  # Job de test
  test:
    runs-on: ubuntu-latest  # Utilisation d'un environnement Ubuntu

    services:
      postgres:
        image: postgres:15  # Utiliser l'image officielle PostgreSQL
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Vérifier le code source

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Spécifiez la version de Node.js

      - name: Install dependencies
        run: npm install  # Installation des dépendances

      - name: Set DATABASE_URL environment variable
        run: echo "DATABASE_URL=postgresql://user:password@localhost:5432/testdb" >> $GITHUB_ENV

      - name: Run tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: npm run test  # Exécute les tests unitaires avec Jest

  # Job de déploiement
  deploy:
    needs: test  # Ce job se déclenche après le job de test
    runs-on: ubuntu-latest  # Environnement Ubuntu
    if: always()  # Lance le déploiement même si le job de test échoue

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Vérifier le code source

      - name: Set up Docker Compose
        run: |
          docker-compose up -d  # Lancer les conteneurs avec Docker Compose

      - name: Wait for PostgreSQL
        run: |
          until docker exec $(docker ps -qf "name=postgres") pg_isready -U user -h localhost; do
            echo "Waiting for database...";
            sleep 5;
          done

      - name: Build and start the backend
        run: |
          docker build -t plant-backend .  # Construire l'image Docker pour le backend
          docker run -d --name backend -p 8080:8080 --env-file .env plant-backend

      - name: Install Ngrok
        run: |
          curl -s https://ngrok.com/download | tar -xv -C /tmp
          sudo mv /tmp/ngrok /usr/local/bin
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Expose the local server with Ngrok
        run: |
          nohup ngrok http 8080 --log=stdout &  # Lancer Ngrok pour exposer l'application sur le port 8080

      - name: Get Ngrok URL
        id: ngrok-url
        run: |
          sleep 5
          url=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "NGROK_URL=$url" >> $GITHUB_ENV

      - name: Display Ngrok URL
        run: |
          echo "The public Ngrok URL is: ${{ env.NGROK_URL }}"
